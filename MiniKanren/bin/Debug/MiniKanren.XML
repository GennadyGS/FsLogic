<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MiniKanren</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MiniKanren.reify(MiniKanren.Term,MiniKanren.Subst)">
<summary>
Remove al vars from a value given a substitution, if they are unassociated
 string like _0, _1 are shown
Note: in a typed setting, this would not return a Subs type, I think, but
a reified Subst type which looks very similar, but has no Var case.
</summary>
</member>
<member name="M:MiniKanren.reifyS(MiniKanren.Term,MiniKanren.Subst)">
<summary>
Extends a substitution s with values for v that are strings _0, _1 etc.
</summary>
</member>
<member name="M:MiniKanren.walkMany(MiniKanren.Term,MiniKanren.Subst)">
<summary>
Like walk, but also looks into sequences
</summary>
</member>
<member name="">

</member>
<member name="M:MiniKanren.unify(MiniKanren.Term,MiniKanren.Term,MiniKanren.Subst)">
<summary>
Unifies two terms u and v with respect to the substitution s, returning
Some s&apos;, a potentially extended substitution if unification succeeds, and None if
unification fails or would introduce a circularity.
</summary>
</member>
<member name="M:MiniKanren.ext(MiniKanren.Var,MiniKanren.Term,MiniKanren.Subst)">
<summary>
Calls extNoCheck only if the occurs call succeeds.
</summary>
</member>
<member name="M:MiniKanren.occurs(MiniKanren.Var,MiniKanren.Term,MiniKanren.Subst)">
<summary>
Returns true if adding an association between x and v
would introduce a circularity.
A circularity would in the first instance cause walk to diverge
(loop infinitely)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MiniKanren.Option">

</member>
<member name="T:MiniKanren">

</member>
</members>
</doc>
